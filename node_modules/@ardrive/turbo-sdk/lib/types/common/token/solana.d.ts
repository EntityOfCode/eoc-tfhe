/**
 * Copyright (C) 2022-2023 Permanent Data Solutions, Inc. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { Connection } from '@solana/web3.js';
import { BigNumber } from 'bignumber.js';
import { TokenConfig, TokenCreateTxParams, TokenPollingOptions, TokenTools, TurboLogger } from '../../types.js';
export declare const lamportToTokenAmount: (winston: BigNumber.Value) => BigNumber.Value;
export declare const SOLToTokenAmount: (sol: BigNumber.Value) => string;
export declare class SolanaToken implements TokenTools {
    protected logger: TurboLogger;
    protected connection: Connection;
    protected gatewayUrl: string;
    protected pollingOptions: TokenPollingOptions;
    constructor({ logger, gatewayUrl, pollingOptions, }?: TokenConfig);
    createAndSubmitTx({ target, tokenAmount, signer, }: TokenCreateTxParams): Promise<{
        id: string;
        target: string;
    }>;
    private submitTx;
    pollForTxBeingAvailable({ txId, }: {
        txId: string;
    }): Promise<void>;
}
//# sourceMappingURL=solana.d.ts.map