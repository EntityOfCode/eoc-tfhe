/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/**
 * Copyright (C) 2022-2023 Permanent Data Solutions, Inc. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { AxiosInstance } from 'axios';
import { IAxiosRetryConfig } from 'axios-retry';
import { Readable } from 'stream';
import { ReadableStream } from 'stream/web';
import { TurboHTTPServiceInterface, TurboLogger, TurboSignedRequestHeaders } from '../types.js';
export declare class TurboHTTPService implements TurboHTTPServiceInterface {
    protected axios: AxiosInstance;
    protected logger: TurboLogger;
    constructor({ url, retryConfig, logger, }: {
        url: string;
        retryConfig?: IAxiosRetryConfig;
        logger: TurboLogger;
    });
    get<T>({ endpoint, signal, allowedStatuses, headers, }: {
        endpoint: string;
        signal?: AbortSignal;
        allowedStatuses?: number[];
        headers?: Partial<TurboSignedRequestHeaders> & Record<string, string>;
    }): Promise<T>;
    post<T>({ endpoint, signal, allowedStatuses, headers, data, }: {
        endpoint: string;
        signal?: AbortSignal;
        allowedStatuses?: number[];
        headers?: Partial<TurboSignedRequestHeaders> & Record<string, string>;
        data: Readable | Buffer | ReadableStream;
    }): Promise<T>;
}
//# sourceMappingURL=http.d.ts.map