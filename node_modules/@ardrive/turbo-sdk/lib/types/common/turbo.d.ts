/**
 * Copyright (C) 2022-2023 Permanent Data Solutions, Inc. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { Currency, TurboAbortSignal, TurboAuthenticatedClientConfiguration, TurboAuthenticatedClientInterface, TurboAuthenticatedPaymentServiceInterface, TurboAuthenticatedUploadServiceInterface, TurboBalanceResponse, TurboCheckoutSessionParams, TurboCheckoutSessionResponse, TurboCountriesResponse, TurboCryptoFundResponse, TurboCurrenciesResponse, TurboFiatToArResponse, TurboFileFactory, TurboFundWithTokensParams, TurboPriceResponse, TurboRatesResponse, TurboSignedDataItemFactory, TurboSubmitFundTxResponse, TurboUnauthenticatedClientConfiguration, TurboUnauthenticatedClientInterface, TurboUnauthenticatedPaymentServiceInterface, TurboUnauthenticatedUploadServiceInterface, TurboUploadDataItemResponse, TurboWincForFiatParams, TurboWincForFiatResponse } from '../types.js';
/**
 * Testing configuration.
 */
export declare const developmentTurboConfiguration: {
    paymentServiceConfig: {
        url: string;
    };
    uploadServiceConfig: {
        url: string;
    };
};
/**
 * Production configuration.
 */
export declare const defaultTurboConfiguration: {
    paymentServiceConfig: {
        url: string;
    };
    uploadServiceConfig: {
        url: string;
    };
};
export declare class TurboUnauthenticatedClient implements TurboUnauthenticatedClientInterface {
    protected paymentService: TurboUnauthenticatedPaymentServiceInterface;
    protected uploadService: TurboUnauthenticatedUploadServiceInterface;
    constructor({ uploadService, paymentService, }: TurboUnauthenticatedClientConfiguration);
    /**
     * Returns the supported fiat currency conversion rate for 1AR based on current market prices.
     */
    getFiatToAR({ currency, }: {
        currency: Currency;
    }): Promise<TurboFiatToArResponse>;
    /**
     * Returns the latest conversion rates to purchase 1GiB of data for all supported currencies, including all adjustments and fees.
     *
     * Note: this does not take into account varying adjustments and promotions for different sizes of data. If you want to calculate the total
     * cost in 'winc' for a given number of bytes, use getUploadCosts.
     */
    getFiatRates(): Promise<TurboRatesResponse>;
    /**
     * Returns a comprehensive list of supported countries that can purchase credits through the Turbo Payment Service.
     */
    getSupportedCountries(): Promise<TurboCountriesResponse>;
    /**
     * Returns a list of all supported fiat currencies.
     */
    getSupportedCurrencies(): Promise<TurboCurrenciesResponse>;
    /**
     * Determines the price in 'winc' to upload one data item of a specific size in bytes, including all Turbo cost adjustments and fees.
     */
    getUploadCosts({ bytes, }: {
        bytes: number[];
    }): Promise<TurboPriceResponse[]>;
    /**
     * Determines the amount of 'winc' that would be returned for a given currency and amount, including all Turbo cost adjustments and fees.
     */
    getWincForFiat(params: TurboWincForFiatParams): Promise<TurboWincForFiatResponse>;
    /**
     * Uploads a signed data item to the Turbo Upload Service.
     */
    uploadSignedDataItem({ dataItemStreamFactory, dataItemSizeFactory, signal, }: TurboSignedDataItemFactory & TurboAbortSignal): Promise<TurboUploadDataItemResponse>;
    /**
     * Creates a Turbo Checkout Session for a given amount and currency.
     */
    createCheckoutSession(params: TurboCheckoutSessionParams): Promise<TurboCheckoutSessionResponse>;
    /**
     * Submits a transaction ID to the Turbo Payment Service for processing.
     */
    submitFundTransaction(p: {
        txId: string;
    }): Promise<TurboSubmitFundTxResponse>;
}
export declare class TurboAuthenticatedClient extends TurboUnauthenticatedClient implements TurboAuthenticatedClientInterface {
    protected paymentService: TurboAuthenticatedPaymentServiceInterface;
    protected uploadService: TurboAuthenticatedUploadServiceInterface;
    constructor({ paymentService, uploadService, }: TurboAuthenticatedClientConfiguration);
    /**
     * Returns the current balance of the user's wallet in 'winc'.
     */
    getBalance(): Promise<TurboBalanceResponse>;
    /**
     * Signs and uploads raw data to the Turbo Upload Service.
     */
    uploadFile({ fileStreamFactory, fileSizeFactory, signal, dataItemOpts, }: TurboFileFactory & TurboAbortSignal): Promise<TurboUploadDataItemResponse>;
    /**
     * Submits fund transaction to the token's blockchain then sends
     * the transaction ID to the Turbo Payment Service for processing.
     */
    topUpWithTokens(p: TurboFundWithTokensParams): Promise<TurboCryptoFundResponse>;
}
//# sourceMappingURL=turbo.d.ts.map