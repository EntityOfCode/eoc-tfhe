import { Currency, TokenTools, TokenType, TurboAuthenticatedPaymentServiceConfiguration, TurboAuthenticatedPaymentServiceInterface, TurboBalanceResponse, TurboCheckoutSessionParams, TurboCheckoutSessionResponse, TurboCountriesResponse, TurboCryptoFundResponse, TurboCurrenciesResponse, TurboDataItemSigner, TurboFiatToArResponse, TurboFundWithTokensParams, TurboLogger, TurboPriceResponse, TurboRatesResponse, TurboSignedRequestHeaders, TurboSubmitFundTxResponse, TurboUnauthenticatedPaymentServiceConfiguration, TurboUnauthenticatedPaymentServiceInterface, TurboWincForFiatParams, TurboWincForFiatResponse } from '../types.js';
import { TurboHTTPService } from './http.js';
export declare const developmentPaymentServiceURL = "https://payment.ardrive.dev";
export declare const defaultPaymentServiceURL = "https://payment.ardrive.io";
export declare class TurboUnauthenticatedPaymentService implements TurboUnauthenticatedPaymentServiceInterface {
    protected readonly httpService: TurboHTTPService;
    protected logger: TurboLogger;
    protected readonly token: TokenType;
    constructor({ url, retryConfig, logger, token, }: TurboUnauthenticatedPaymentServiceConfiguration);
    getFiatRates(): Promise<TurboRatesResponse>;
    getFiatToAR({ currency, }: {
        currency: Currency;
    }): Promise<TurboFiatToArResponse>;
    getSupportedCountries(): Promise<TurboCountriesResponse>;
    getSupportedCurrencies(): Promise<TurboCurrenciesResponse>;
    getUploadCosts({ bytes, }: {
        bytes: number[];
    }): Promise<TurboPriceResponse[]>;
    getWincForFiat({ amount, }: TurboWincForFiatParams): Promise<TurboWincForFiatResponse>;
    protected appendPromoCodesToQuery(promoCodes: string[]): string;
    protected getCheckout({ amount, owner, promoCodes, uiMode, }: TurboCheckoutSessionParams, headers?: TurboSignedRequestHeaders): Promise<TurboCheckoutSessionResponse>;
    createCheckoutSession(params: TurboCheckoutSessionParams): Promise<TurboCheckoutSessionResponse>;
    submitFundTransaction({ txId, }: {
        txId: string;
    }): Promise<TurboSubmitFundTxResponse>;
}
export declare class TurboAuthenticatedPaymentService extends TurboUnauthenticatedPaymentService implements TurboAuthenticatedPaymentServiceInterface {
    protected readonly signer: TurboDataItemSigner;
    protected readonly tokenTools: TokenTools | undefined;
    constructor({ url, retryConfig, signer, logger, token, tokenTools, }: TurboAuthenticatedPaymentServiceConfiguration);
    getBalance(): Promise<TurboBalanceResponse>;
    getWincForFiat({ amount, promoCodes, }: TurboWincForFiatParams): Promise<TurboWincForFiatResponse>;
    createCheckoutSession(params: TurboCheckoutSessionParams): Promise<TurboCheckoutSessionResponse>;
    private getTargetWalletForFund;
    topUpWithTokens({ feeMultiplier, tokenAmount: tokenAmountV, }: TurboFundWithTokensParams): Promise<TurboCryptoFundResponse>;
}
//# sourceMappingURL=payment.d.ts.map