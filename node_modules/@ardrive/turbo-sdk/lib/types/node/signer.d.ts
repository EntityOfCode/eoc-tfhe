/// <reference types="node" />
/**
 * Copyright (C) 2022-2023 Permanent Data Solutions, Inc. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { ArconnectSigner, ArweaveSigner, EthereumSigner, HexSolanaSigner } from 'arbundles';
import { Readable } from 'node:stream';
import { TurboDataItemAbstractSigner } from '../common/signer.js';
import { DataItemOptions, StreamSizeFactory, TurboDataItemSignerParams } from '../types.js';
/**
 * Utility exports to avoid clients having to install arbundles
 */
export { ArconnectSigner, ArweaveSigner, EthereumSigner, HexSolanaSigner };
/**
 * Node implementation of TurboDataItemSigner.
 */
export declare class TurboNodeSigner extends TurboDataItemAbstractSigner {
    constructor(p: TurboDataItemSignerParams);
    signDataItem({ fileStreamFactory, fileSizeFactory, dataItemOpts, }: {
        fileStreamFactory: () => Readable;
        fileSizeFactory: StreamSizeFactory;
        dataItemOpts?: DataItemOptions;
    }): Promise<{
        dataItemStreamFactory: () => Readable;
        dataItemSizeFactory: StreamSizeFactory;
    }>;
    private calculateSignedDataHeadersSize;
}
//# sourceMappingURL=signer.d.ts.map