"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ARToTokenAmount = exports.WinstonToTokenAmount = exports.ArweaveToken = void 0;
/**
 * Copyright (C) 2022-2023 Permanent Data Solutions, Inc. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
const arweave_1 = __importDefault(require("@irys/arweave"));
const bignumber_js_1 = require("bignumber.js");
const base64_js_1 = require("../../utils/base64.js");
const common_js_1 = require("../../utils/common.js");
const logger_js_1 = require("../logger.js");
class ArweaveToken {
    constructor({ gatewayUrl = 'https://arweave.net', arweave = arweave_1.default.init({
        url: gatewayUrl,
    }), logger = new logger_js_1.TurboWinstonLogger(), mintU = true, pollingOptions = {
        maxAttempts: 10,
        pollingIntervalMs: 3000,
        initialBackoffMs: 7000,
    }, } = {}) {
        this.arweave = arweave;
        this.logger = logger;
        this.mintU = mintU;
        this.pollingOptions = pollingOptions;
    }
    async createAndSubmitTx({ feeMultiplier, target, tokenAmount, signer, }) {
        const tx = await this.arweave.createTransaction({
            target,
            quantity: tokenAmount.toString(),
            data: '',
        });
        if (feeMultiplier !== 1) {
            tx.reward = (0, bignumber_js_1.BigNumber)(tx.reward)
                .times((0, bignumber_js_1.BigNumber)(feeMultiplier))
                .toFixed(0, bignumber_js_1.BigNumber.ROUND_UP);
        }
        if (this.mintU) {
            tx.addTag('App-Name', 'SmartWeaveAction');
            tx.addTag('App-Version', '0.3.0'); // cspell:disable
            tx.addTag('Contract', 'KTzTXT_ANmF84fWEKHzWURD1LWd9QaFR9yfYUwH2Lxw'); // cspell:enable
            tx.addTag('Input', JSON.stringify({ function: 'mint' }));
        }
        const publicKeyB64Url = (0, base64_js_1.toB64Url)(await signer.getPublicKey());
        tx.setOwner(publicKeyB64Url);
        const dataToSign = await tx.getSignatureData();
        const signatureUint8Array = await signer.signData(dataToSign);
        const signatureBuffer = Buffer.from(signatureUint8Array);
        const id = (0, base64_js_1.sha256B64Url)(signatureBuffer);
        tx.setSignature({
            id: id,
            owner: publicKeyB64Url,
            signature: (0, base64_js_1.toB64Url)(signatureBuffer),
        });
        this.logger.debug('Submitting fund transaction...', { id });
        await this.submitTx(tx);
        return { id, target, reward: tx.reward };
    }
    async pollForTxBeingAvailable({ txId, }) {
        const { maxAttempts, pollingIntervalMs, initialBackoffMs } = this.pollingOptions;
        this.logger.debug('Polling for transaction...', { txId });
        await (0, common_js_1.sleep)(initialBackoffMs);
        let attempts = 0;
        while (attempts < maxAttempts) {
            let transaction;
            attempts++;
            try {
                const response = await this.arweave.api.post('/graphql', {
                    query: `
          query {
            transaction(id: "${txId}") {
              recipient
              owner {
                address
              }
              quantity {
                winston
              }
            }
          }
          `,
                });
                transaction = response?.data?.data?.transaction;
            }
            catch (err) {
                // Continue retries when request errors
                this.logger.debug('Failed to poll for transaction...', { err });
            }
            if (transaction) {
                return;
            }
            this.logger.debug('Transaction not found...', {
                txId,
                attempts,
                maxAttempts,
                pollingIntervalMs,
            });
            await (0, common_js_1.sleep)(pollingIntervalMs);
        }
        throw new Error('Transaction not found after polling, transaction id: ' + txId);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async submitTx(tx) {
        try {
            const response = await this.arweave.transactions.post(tx);
            if (response.status !== 200) {
                throw new Error('Failed to post transaction -- ' +
                    `Status ${response.status}, ${response.statusText}, ${response.data}`);
            }
            this.logger.debug('Successfully posted fund transaction...', { tx });
        }
        catch (err) {
            throw new Error(`Failed to post transaction -- ${err instanceof Error ? err.message : err}`);
        }
        this.logger.debug('Posted transaction...', { tx });
    }
}
exports.ArweaveToken = ArweaveToken;
const WinstonToTokenAmount = (winston) => winston;
exports.WinstonToTokenAmount = WinstonToTokenAmount;
const ARToTokenAmount = (ar) => new bignumber_js_1.BigNumber(ar).times(1e12).valueOf();
exports.ARToTokenAmount = ARToTokenAmount;
