"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TurboNodeSigner = exports.HexSolanaSigner = exports.EthereumSigner = exports.ArweaveSigner = exports.ArconnectSigner = void 0;
/**
 * Copyright (C) 2022-2023 Permanent Data Solutions, Inc. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
const arbundles_1 = require("arbundles");
Object.defineProperty(exports, "ArconnectSigner", { enumerable: true, get: function () { return arbundles_1.ArconnectSigner; } });
Object.defineProperty(exports, "ArweaveSigner", { enumerable: true, get: function () { return arbundles_1.ArweaveSigner; } });
Object.defineProperty(exports, "EthereumSigner", { enumerable: true, get: function () { return arbundles_1.EthereumSigner; } });
Object.defineProperty(exports, "HexSolanaSigner", { enumerable: true, get: function () { return arbundles_1.HexSolanaSigner; } });
const signer_js_1 = require("../common/signer.js");
const base64_js_1 = require("../utils/base64.js");
/**
 * Node implementation of TurboDataItemSigner.
 */
class TurboNodeSigner extends signer_js_1.TurboDataItemAbstractSigner {
    constructor(p) {
        super(p);
    }
    async signDataItem({ fileStreamFactory, fileSizeFactory, dataItemOpts, }) {
        // TODO: replace with our own signer implementation
        this.logger.debug('Signing data item...');
        const [stream1, stream2] = [fileStreamFactory(), fileStreamFactory()];
        const signedDataItem = await (0, arbundles_1.streamSigner)(stream1, stream2, this.signer, dataItemOpts);
        this.logger.debug('Successfully signed data item...');
        // TODO: support target, anchor, and tags
        const signedDataItemSize = this.calculateSignedDataHeadersSize({
            dataSize: fileSizeFactory(),
            dataItemOpts,
        });
        return {
            dataItemStreamFactory: () => signedDataItem,
            dataItemSizeFactory: () => signedDataItemSize,
        };
    }
    // TODO: make dynamic that accepts anchor and target and tags to return the size of the headers + data
    // reference https://github.com/ArweaveTeam/arweave-standards/blob/master/ans/ANS-104.md#13-dataitem-format
    calculateSignedDataHeadersSize({ dataSize, dataItemOpts, }) {
        const { tags, anchor, target } = dataItemOpts ?? {};
        // ref: https://github.com/Irys-xyz/arbundles/blob/master/src/ar-data-create.ts#L18
        const _target = typeof target === 'string' ? (0, base64_js_1.fromB64Url)(target) : null;
        const targetLength = 1 + (_target ? _target.byteLength : 0);
        const _anchor = typeof anchor === 'string' ? Buffer.from(anchor) : null;
        const anchorLength = 1 + (_anchor ? _anchor.byteLength : 0);
        const serializedTags = tags && tags.length > 0 ? (0, arbundles_1.serializeTags)(tags) : null;
        const tagsLength = 16 + (serializedTags ? serializedTags.byteLength : 0);
        const { ownerLength, signatureLength } = this.sigConfig;
        const signatureTypeLength = 2;
        return [
            anchorLength,
            targetLength,
            tagsLength,
            signatureLength,
            ownerLength,
            signatureTypeLength,
            dataSize,
        ].reduce((totalSize, currentSize) => (totalSize += currentSize));
    }
}
exports.TurboNodeSigner = TurboNodeSigner;
