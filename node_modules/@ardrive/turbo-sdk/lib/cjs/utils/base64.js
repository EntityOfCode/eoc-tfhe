"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sha256B64Url = exports.toB64Url = exports.fromB64Url = exports.ownerToAddress = exports.jwkToPublicArweaveAddress = exports.base64URLRegex = void 0;
/**
 * Copyright (C) 2022-2023 Permanent Data Solutions, Inc. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
const utils_js_1 = require("arweave/node/lib/utils.js");
const crypto_1 = require("crypto");
exports.base64URLRegex = /^[a-zA-Z0-9_-]{43}$/;
function jwkToPublicArweaveAddress(jwk) {
    return ownerToAddress(jwk.n);
}
exports.jwkToPublicArweaveAddress = jwkToPublicArweaveAddress;
function ownerToAddress(owner) {
    return sha256B64Url(fromB64Url(owner));
}
exports.ownerToAddress = ownerToAddress;
function fromB64Url(input) {
    const paddingLength = input.length % 4 === 0 ? 0 : 4 - (input.length % 4);
    const base64 = input
        .replace(/-/g, '+')
        .replace(/_/g, '/')
        .concat('='.repeat(paddingLength));
    return Buffer.from(base64, 'base64');
}
exports.fromB64Url = fromB64Url;
function toB64Url(buffer) {
    return (0, utils_js_1.bufferTob64Url)(buffer);
}
exports.toB64Url = toB64Url;
function sha256B64Url(input) {
    return toB64Url((0, crypto_1.createHash)('sha256').update(input).digest());
}
exports.sha256B64Url = sha256B64Url;
