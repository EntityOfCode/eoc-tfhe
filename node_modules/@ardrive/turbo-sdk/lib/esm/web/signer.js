/**
 * Copyright (C) 2022-2023 Permanent Data Solutions, Inc. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { ArconnectSigner, ArweaveSigner, EthereumSigner, HexSolanaSigner, createData, } from 'arbundles';
import { TurboDataItemAbstractSigner } from '../common/signer.js';
import { readableStreamToBuffer } from '../utils/readableStream.js';
/**
 * Utility exports to avoid clients having to install arbundles
 */
export { ArconnectSigner, ArweaveSigner, EthereumSigner, HexSolanaSigner };
/**
 * Web implementation of TurboDataItemSigner.
 */
export class TurboWebArweaveSigner extends TurboDataItemAbstractSigner {
    constructor(p) {
        super(p);
    }
    async setPublicKey() {
        // for arconnect, we need to make sure we have the public key before create data
        if (this.signer.publicKey === undefined &&
            this.signer instanceof ArconnectSigner) {
            await this.signer.setPublicKey();
        }
    }
    async getPublicKey() {
        await this.setPublicKey();
        return super.getPublicKey();
    }
    async signDataItem({ fileStreamFactory, fileSizeFactory, dataItemOpts, }) {
        await this.setPublicKey();
        // TODO: converts the readable stream to a buffer bc incrementally signing ReadableStreams is not trivial
        const buffer = await readableStreamToBuffer({
            stream: fileStreamFactory(),
            size: fileSizeFactory(),
        });
        this.logger.debug('Signing data item...');
        const signedDataItem = createData(buffer, this.signer, dataItemOpts);
        await signedDataItem.sign(this.signer);
        this.logger.debug('Successfully signed data item...');
        return {
            // while this returns a Buffer - it needs to match our return type for uploading
            dataItemStreamFactory: () => signedDataItem.getRaw(),
            dataItemSizeFactory: () => signedDataItem.getRaw().length,
        };
    }
    async generateSignedRequestHeaders() {
        await this.setPublicKey();
        return super.generateSignedRequestHeaders();
    }
    async signData(dataToSign) {
        await this.setPublicKey();
        return super.signData(dataToSign);
    }
}
