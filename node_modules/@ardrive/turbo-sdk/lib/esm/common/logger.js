/**
 * Copyright (C) 2022-2023 Permanent Data Solutions, Inc. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { createLogger, format, transports } from 'winston';
import { version } from '../version.js';
export class TurboWinstonLogger {
    constructor({ level = 'info', logFormat = 'simple', } = {}) {
        this.logger = createLogger({
            level,
            defaultMeta: { client: 'turbo-sdk', version },
            silent: level === 'none',
            format: getLogFormat(logFormat),
            transports: [new transports.Console()],
        });
    }
    info(message, ...args) {
        this.logger.info(message, ...args);
    }
    warn(message, ...args) {
        this.logger.warn(message, ...args);
    }
    error(message, ...args) {
        this.logger.error(message, ...args);
    }
    debug(message, ...args) {
        this.logger.debug(message, ...args);
    }
    setLogLevel(level) {
        this.logger.level = level;
    }
    setLogFormat(logFormat) {
        this.logger.format = getLogFormat(logFormat);
    }
}
function getLogFormat(logFormat) {
    return format.combine(format((info) => {
        if (info.stack && info.level !== 'error') {
            delete info.stack;
        }
        return info;
    })(), format.errors({ stack: true }), // Ensure errors show a stack trace
    format.timestamp(), logFormat === 'json' ? format.json() : format.simple());
}
