import { TurboHTTPService } from './http.js';
import { TurboWinstonLogger } from './logger.js';
export const developmentUploadServiceURL = 'https://upload.ardrive.dev';
export const defaultUploadServiceURL = 'https://upload.ardrive.io';
export class TurboUnauthenticatedUploadService {
    constructor({ url = defaultUploadServiceURL, retryConfig, logger = new TurboWinstonLogger(), token = 'arweave', }) {
        this.token = token;
        this.logger = logger;
        this.httpService = new TurboHTTPService({
            url: `${url}/v1`,
            retryConfig,
            logger: this.logger,
        });
    }
    async uploadSignedDataItem({ dataItemStreamFactory, dataItemSizeFactory, signal, }) {
        const fileSize = dataItemSizeFactory();
        this.logger.debug('Uploading signed data item...');
        // TODO: add p-limit constraint or replace with separate upload class
        return this.httpService.post({
            endpoint: `/tx/${this.token}`,
            signal,
            data: dataItemStreamFactory(),
            headers: {
                'content-type': 'application/octet-stream',
                'content-length': `${fileSize}`,
            },
        });
    }
}
// NOTE: to avoid redundancy, we use inheritance here - but generally prefer composition over inheritance
export class TurboAuthenticatedUploadService extends TurboUnauthenticatedUploadService {
    constructor({ url = defaultUploadServiceURL, retryConfig, signer, logger, token, }) {
        super({ url, retryConfig, logger, token });
        this.signer = signer;
    }
    async uploadFile({ fileStreamFactory, fileSizeFactory, signal, dataItemOpts, }) {
        const { dataItemStreamFactory, dataItemSizeFactory } = await this.signer.signDataItem({
            fileStreamFactory,
            fileSizeFactory,
            dataItemOpts,
        });
        const signedDataItem = dataItemStreamFactory();
        const fileSize = dataItemSizeFactory();
        this.logger.debug('Uploading signed data item...');
        // TODO: add p-limit constraint or replace with separate upload class
        return this.httpService.post({
            endpoint: `/tx/${this.token}`,
            signal,
            data: signedDataItem,
            headers: {
                'content-type': 'application/octet-stream',
                'content-length': `${fileSize}`,
            },
        });
    }
}
