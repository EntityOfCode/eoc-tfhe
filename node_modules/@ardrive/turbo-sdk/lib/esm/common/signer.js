/**
 * Copyright (C) 2022-2023 Permanent Data Solutions, Inc. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { EthereumSigner, HexSolanaSigner } from 'arbundles';
import { randomBytes } from 'crypto';
import { Wallet as EthereumWallet, parseEther } from 'ethers';
import nacl from 'tweetnacl';
import { toB64Url } from '../utils/base64.js';
/**
 * Abstract class for signing TurboDataItems.
 */
export class TurboDataItemAbstractSigner {
    constructor({ signer, logger }) {
        this.logger = logger;
        this.signer = signer;
    }
    get sigConfig() {
        if (this.signer instanceof EthereumSigner) {
            return {
                signatureLength: 65,
                ownerLength: 65,
            };
        }
        if (this.signer instanceof HexSolanaSigner) {
            return {
                signatureLength: 64,
                ownerLength: 32,
            };
        }
        // base case, arweave/arconnect signer
        return {
            ownerLength: 512,
            signatureLength: 512,
        };
    }
    async generateSignedRequestHeaders() {
        const nonce = randomBytes(16).toString('hex');
        const buffer = Buffer.from(nonce);
        const signature = await this.signer.sign(buffer);
        const publicKey = toB64Url(this.signer.publicKey);
        return {
            'x-public-key': publicKey,
            'x-nonce': nonce,
            'x-signature': toB64Url(Buffer.from(signature)),
        };
    }
    async getPublicKey() {
        return this.signer.publicKey;
    }
    /** Let the signer handle sending tx for better compat with cross chain libraries/web wallets */
    async sendTransaction({ target, amount, provider, }) {
        if (!(this.signer instanceof EthereumSigner)) {
            throw new Error('Only EthereumSigner is supported for sendTransaction API currently!');
        }
        const keyAsStringFromUint8Array = Buffer.from(this.signer.key).toString('hex');
        const ethWalletAndProvider = new EthereumWallet(keyAsStringFromUint8Array, provider);
        const tx = await ethWalletAndProvider.sendTransaction({
            to: target,
            value: parseEther(amount.toFixed(18)),
        });
        this.logger.debug('Sent transaction', { tx });
        return tx.hash;
    }
    async signData(dataToSign) {
        if (this.signer instanceof HexSolanaSigner) {
            const privateKey = this.signer.key;
            const publicKey = Uint8Array.from(await this.getPublicKey());
            // Concatenate the private and public keys correctly
            const combinedKey = new Uint8Array(privateKey.length + publicKey.length);
            combinedKey.set(privateKey);
            combinedKey.set(publicKey, privateKey.length);
            const signature = nacl.sign.detached(dataToSign, combinedKey);
            return signature;
        }
        return this.signer.sign(dataToSign);
    }
}
