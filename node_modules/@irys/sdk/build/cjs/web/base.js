"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseWebIrys = void 0;
const tslib_1 = require("tslib");
require("../common/hack.js");
const api_1 = tslib_1.__importDefault(require("../common/api"));
const fund_1 = tslib_1.__importDefault(require("../common/fund"));
const irys_1 = tslib_1.__importDefault(require("../common/irys"));
const utils_1 = tslib_1.__importDefault(require("../common/utils"));
const provenance_1 = require("../common/provenance");
const transactions_1 = require("../common/transactions");
const arbundles = tslib_1.__importStar(require("./utils"));
const upload_1 = require("./upload");
const approval_1 = require("../common/approval");
class BaseWebIrys extends irys_1.default {
    constructor({ url, wallet, config, getTokenConfig, }) {
        var _a, _b;
        switch (url) {
            case undefined:
            case "node1":
                url = "https://node1.irys.xyz";
                break;
            case "node2":
                url = "https://node2.irys.xyz";
                break;
            case "devnet":
                url = "https://devnet.irys.xyz";
                break;
        }
        const parsed = new URL(url);
        // @ts-expect-error types
        super({ url: parsed, arbundles });
        this.api = new api_1.default({
            url: parsed,
            timeout: (_a = config === null || config === void 0 ? void 0 : config.timeout) !== null && _a !== void 0 ? _a : 100000,
            headers: config === null || config === void 0 ? void 0 : config.headers,
        });
        this.tokenConfig = getTokenConfig(this);
        this.token = this.tokenConfig.name;
        if (parsed.host === "devnet.irys.network" && !((_b = config === null || config === void 0 ? void 0 : config.providerUrl) !== null && _b !== void 0 ? _b : ((wallet === null || wallet === void 0 ? void 0 : wallet.rpcUrl) || this.tokenConfig.inheritsRPC)))
            throw new Error(`Using ${parsed.host} requires a dev/testnet RPC to be configured! see https://docs.irys.network/sdk/using-devnet`);
        this.utils = new utils_1.default(this.api, this.token, this.tokenConfig);
        this.uploader = new upload_1.WebUploader(this);
        this.funder = new fund_1.default(this.utils);
        this.uploader = new upload_1.WebUploader(this);
        this.provenance = new provenance_1.Provenance(this);
        this.transactions = new transactions_1.Transaction(this);
        this.approval = new approval_1.Approval(this);
        this.address = "Please run `await Irys.ready()`";
        this.uploadFolder = this.uploader.uploadFolder.bind(this.uploader);
        this.uploadFile = this.uploader.uploadFile.bind(this.uploader);
    }
}
exports.BaseWebIrys = BaseWebIrys;
//# sourceMappingURL=base.js.map